5.	Construct a scheduling program with C that selects the waiting process with the highest priority to execute next.
#include<stdio.h>
struct Process {
  char process_name;
  int burst_time;
 int waiting_time;
  int turn_around_time;
  int priority;
};
int main() {
  int number_of_processes;
  int total_waiting_time = 0;
  struct Process temp_process;
  int ASCII_number = 65;
  int position;
  float average_waiting_time;
  float average_turnaround_time;
  printf("Enter the total number of Processes: ");
  scanf("%d", &number_of_processes);
  struct Process processes[number_of_processes];
  printf("\nPlease Enter the Burst Time and Priority of each process:\n");
  for (int i = 0; i < number_of_processes; i++) {
    processes[i].process_name = (char) ASCII_number;
    printf("\nEnter the details of the process %c\n", processes[i].process_name);
    printf("Enter the burst time: ");
    scanf("%d", &processes[i].burst_time);
    printf("Enter the priority: ");
    scanf("%d", &processes[i].priority);
    ASCII_number++;
  }
  // Sort processes based on priority (Highest priority first)
  for (int i = 0; i < number_of_processes - 1; i++) {
    position = i;
    for (int j = i + 1; j < number_of_processes; j++) {
      if (processes[j].priority > processes[position].priority)
        position = j;
    }
 temp_process = processes[i];
    processes[i] = processes[position];
    processes[position] = temp_process;
  }
  processes[0].waiting_time = 0;
  // Calculate waiting time for each process
  for (int i = 1; i < number_of_processes; i++) {
    processes[i].waiting_time = 0;
    for (int j = 0; j < i; j++) {
      processes[i].waiting_time += processes[j].burst_time;
    }
    total_waiting_time += processes[i].waiting_time;
  }
  average_waiting_time = (float) total_waiting_time / (float) number_of_processes;
  // Calculate turnaround time for each process and display process details
  printf("\n\nProcess_name\tBurst Time\tWaiting Time\tTurnaround Time\n");
  printf("-----------------------------------------------------------\n");
  int total_turnaround_time = 0;
  for (int i = 0; i < number_of_processes; i++) {
    processes[i].turn_around_time = processes[i].burst_time + processes[i].waiting_time;
    total_turnaround_time += processes[i].turn_around_time;
    printf("\t%c\t\t%d\t\t%d\t\t%d\n", processes[i].process_name, processes[i].burst_time, processes[i].waiting_time, processes[i].turn_around_time);
    printf("-----------------------------------------------------------\n");
  }
  average_turnaround_time = (float) total_turnaround_time / (float) number_of_processes;
  printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
  printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
  return 0;
}
OUTPUT:
Enter the total number of Processes: 3

Please Enter the Burst Time and Priority of each process:

Enter the details of the process A
Enter the burst time: 5
Enter the priority: 3

Enter the details of the process B
Enter the burst time: 3
Enter the priority: 1

Enter the details of the process C
Enter the burst time: 7
Enter the priority: 2


Process_name    Burst Time    Waiting Time    Turnaround Time
-----------------------------------------------------------
        A               5               0               5
-----------------------------------------------------------
        C               7               5               12
-----------------------------------------------------------
        B               3               12              15
-----------------------------------------------------------

Average Waiting Time: 5.67
Average Turnaround Time: 10.67
